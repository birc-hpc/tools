#!/bin/bash


## Option parsing ############################################
function print_usage() {
    cat << EOF
Usage: verdandi [options] [--] [command...]

    command:
         The command you want to run a monitor on

    options:
        -h    Show this message.
        -s    Silence the command (redirect its output)
        -o    Output file. The log is written here. [default: stdout]
        --    End of options and start of the command to run.
              Use this to separate verdandi options from your tool's
              options.

EOF
}
function print_help() {
    cat << EOF
VerÃ°andi (anglicised Verdandi), meaning "happening" or "present",
is one of the three Norse goddesses of fate.

The verdandi script sees a little bit of what a process is up to...

EOF
    print_usage
}


if (( $# == 0 )); then
    print_usage
    exit 22
fi

silence_str=""
outfile=/dev/stdout
while getopts "hso:" flag; do
    case $flag in
        h) print_help ; exit 0 ;;
        o) outfile=$OPTARG     ;;
        s) silence_str="> /dev/null 2> /dev/null" ;;
    esac
done
shift $((OPTIND-1)) # set $@ to the remaining args. They will the command we run

## Starting up the command... #############################################

# This bit is a bit crazy. We want the process ID of the program,
# but we want it right away so we cannot wait for it to finish where
# we could get $!. Instead, we write $$ through a pipe (so we can
# get it non-blocking). We do this in a shell that exec the command,
# so after the shell has printed the process id, the process id
# is taken over by the command.

# The cleanup function handles interuptions, if we want to stop
# the measuremnets before time, and it is responsible for
# cleaning up the fifo and killing the child.
function cleanup_handler() {
  if [[ -n $tmppipe ]] ; then rm -rf $tmppipe; fi
  kill $pid
  trap - EXIT
  exit
}
trap 'cleanup_handler'      EXIT
trap 'cleanup_handler HUP'  HUP
trap 'cleanup_handler TERM' TERM
trap 'cleanup_handler INT'  INT

# Run command in background (but putting result in tmppipe first)
tmppipe=$(mktemp -u)
mkfifo -m 600 $tmppipe                      # Set up pipe
bash -c "echo \$\$ > $tmppipe; exec $* $silence_str " &  # Run other process in background

# Get PID from pipe
pid=$( cat $tmppipe )

## Monitoring the other process... ####################################
# Now we can monitor the process using ps -p $PID and finish when
# the ps command returns a non-zero status
function wrap_up() {
    # Called when ps reports the process is dead
    pid=0    # So we don't try to kill ther sub-process when exiting
    exit 0   # exit success, rather than the ps command's failure
}
function measure() {
    local res measurements
    res=$( ps -p $pid -o etime= -o cputime= -o cpu= -o rss= ) || wrap_up
    IFS=' ' read -ra measurements <<< "$res"
    elapsed=${measurements[0]}
    cputime=${measurements[1]}
    cpuload=${measurements[2]}
    # rss is measured in 1024 byte pages. We translate it into kilobytes
    memload=$(( ${measurements[3]} * 1024 / 1000 )) 
}

printf "%-15s,%-15s,%-15s,%-15s\n" \
    "Elapsed time" \
    "Acc. CPU time" \
    "CPU load" \
    "Memory load (kbytes)" > $outfile

while measure; do
    printf "%-15s,%-15s,%-15s,%-15s\n" ${elapsed} ${cputime} ${cpuload} ${memload} >> $outfile
    sleep 1
done
